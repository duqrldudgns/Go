1. 패키지 함수 호출 
접두어가 대문자(Public)  - 가능
접두어가 소문자(Private) - 불가능
-패키지 내의 변수명도 동일

package main

import "fmt"

func main() {
	fmt.Println("Hello World!")
}


2. 상수, 변수 타입 선언

상수 
- const name string = "nico"
변수 
- var name string = "nico"

name := "nico" 타입 자동 선언(함수 내에서만 가능)


3. 함수
- 인자값과 리턴값의 자료형 명시
- 다수의 리턴값
- 리턴값 변수로 받기 생략 가능
- 인자값 여러개 쉽게 받을 수 있음

func multiply(a int, b int) int {	//  = (a, b int)
	return a * b
}

func lenAndUpper(name string) (int, string) {
	return len(name), strings.ToUpper(name)
}

func repeatMe(words ...string) {
	fmt.Println(words)
}

func main() {
	fmt.Println(multiply(2, 2))

	totalLenght, upperName := lenAndUpper("nico")
	fmt.Println(totalLenght, upperName)

	ttl, _ := lenAndUpper("nico")
	fmt.Println(ttl)

	repeatMe("nico", "lynn", "dal", "marl", "flynn")
}


4. naked return 함수
- 함수 선언과 같이 리턴값의 변수명과 자료형을 선언
- 리턴값을 명시 안해도 동작

func lenAndUpper(name string) (lenght int, uppercase string) {
   lenght = len(name)
   uppercase = strings.ToUpper(name)
   return
}

func main() {
   totalLenght, up := lenAndUpper("nico")
   fmt.Println(totalLenght, up)
}


5. defer
함수내에 존재하고 함수가 끝나고나서 마지막에 실행

func ~~(){
   defer fmt.Println("I'm done")
   return ~~
}


6. for
- index와 value 를 반환 
- ignore 가능

func superAdd(numbers ...int) {
   for index, number := range numbers {
      fmt.Println(index, number)
   }
}

func superAdd2(numbers ...int) {
   for i := 0; i < len(numbers); i++ {
      fmt.Println(numbers[i])
   }
}

func superAdd3(numbers ...int) int {
   total := 0
   for _, number := range numbers {
      total += number
   }
   return total
}

func main() {
   superAdd(1, 2, 3, 4, 5, 6)
   superAdd2(1, 2, 3, 4, 5, 6)

   result := superAdd3(1, 2, 3, 4, 5, 6)
   fmt.Println(result)
}


7. if

func canIDrink(age int) bool {
	if koreanAge := age + 2; koreanAge < 19 {
		return false
	} else {
		return true
	}
}

func main() {
	fmt.Println(canIDrink(16))
}


8. switch
- if, else 처럼 사용 가능

func canIDrink(age int) bool {
	switch koreanAge := age + 2; koreanAge {
	case 10:
		return false
	case 18:
		return true
	}
	return false
}

func canIDrink2(age int) bool {
	switch {
	case age < 18:
		return false
	case age == 18:
		return true
	case age > 50:
		return false
	}
	return false
}


9. pointer
- C언어와 사용법 같음


10. array, slice
- slice는 append을 이용하여 추가 가능

func main() {
	names := [5]string{"nico", "lynn", "dal"}
	names[3] = "alala"
	names[4] = "alala"
	fmt.Println(names)

	names2 := []string{"nico", "lynn", "dal"}
	names2 = append(names2, "flynn")
	fmt.Println(names2)

}


11. map

func main() {
	nico := map[string]string{"name": "nico", "age": "12"}
	for key, value := range nico {
		fmt.Println(key, value)
	}
}


12. struct

type person struct {
	name    string
	age     int
	favFood []string
}

func main() {
	favFood := []string{"kimchi", "ramen"}
	nico := person{name: "nico", age: 18, favFood: favFood}
	nico2 := person{"nico2", 19, favFood}
	fmt.Println(nico, nico2.name)
}


13. Method

func (a Account) Balance() int {		//Account is struct
	return a.balance
}

메소드는 복사본을 받아오기때문에 무언가 값을 변경 할 때에는 아래의 경우가 맞다.

func (a *Account) Deposit(amount int) {		//Account is struct
	a.balance += amount
}

14. nil = NULL